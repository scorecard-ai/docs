openapi: 3.1.0
info:
  title: Scorecard API
  description: REST API for Scorecard
  version: 1.0.0
servers:
  - url: https://api2.scorecard.io/api/v2
security:
  - bearerAuth: []
paths:
  /projects:
    get:
      operationId: listProjects
      summary: Get projects
      description: >-
        Retrieve a paginated list of all Projects. Projects are ordered by creation date, with oldest Projects
        first.
      parameters:
        - in: query
          name: limit
          description: Maximum number of items to return (1-100). Use with `cursor` for pagination through large sets.
          schema:
            type: integer
            exclusiveMinimum: 0
            default: 20
            example: 20
        - in: query
          name: cursor
          description: >-
            Cursor for pagination. Pass the `nextCursor` from the previous response to get the next page of
            results.
          schema:
            type: string
            example: "123"
      responses:
        "200":
          description: Successfully retrieved list of Projects.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: The ID of the Project.
                        name:
                          type:
                            - string
                            - "null"
                          description: The name of the Project.
                      required:
                        - id
                        - name
                      description: A Project in the Scorecard system.
                  nextCursor:
                    type:
                      - string
                      - "null"
                  hasMore:
                    type: boolean
                  total:
                    type: integer
                    minimum: 0
                required:
                  - data
                  - nextCursor
                  - hasMore
              examples:
                Project list with pagination:
                  value:
                    data:
                      - id: 123
                        name: Q&A Chatbot
                        description: Chatbot for answering questions about the company.
                      - id: 124
                        name: Summarizer (Europe)
                        description: Summarizer for documents in the Europe region.
                    nextCursor: "125"
                    hasMore: true
                  summary: Project list with pagination
                  description: Example response showing a list of two Projects with pagination information.
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/ServiceError"
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              // Automatically fetches more pages as needed.
              for await (const projectListResponse of client.projects.list()) {
                console.log(projectListResponse.id);
              }
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecard_ai import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            page = client.projects.list()
            page = page.data[0]
            print(page.id)
  /projects/{projectId}/testsets:
    get:
      operationId: listTestsets
      summary: Get Testsets in Project
      description: Retrieve a paginated list of Testsets belonging to a Project.
      parameters:
        - in: path
          name: projectId
          description: The ID of the Project.
          schema:
            type: string
            example: "314"
          required: true
        - in: query
          name: limit
          description: Maximum number of items to return (1-100). Use with `cursor` for pagination through large sets.
          schema:
            type: integer
            exclusiveMinimum: 0
            default: 20
            example: 20
        - in: query
          name: cursor
          description: >-
            Cursor for pagination. Pass the `nextCursor` from the previous response to get the next page of
            results.
          schema:
            type: string
            example: "123"
      responses:
        "200":
          description: Successfully retrieved list of Testsets.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Testset"
                  nextCursor:
                    type:
                      - string
                      - "null"
                  hasMore:
                    type: boolean
                  total:
                    type: integer
                    minimum: 0
                required:
                  - data
                  - nextCursor
                  - hasMore
              examples:
                Testset list with fields:
                  value:
                    data:
                      - id: "246"
                        name: Long Context Q&A
                        description: Testset for long context Q&A chatbot.
                        jsonSchema:
                          type: object
                          properties:
                            question:
                              type: string
                            idealAnswer:
                              type: string
                            provenance:
                              type: string
                            geo:
                              type: string
                        fieldMapping:
                          inputs:
                            - question
                          labels:
                            - idealAnswer
                          metadata:
                            - provenance
                            - geo
                    nextCursor: "247"
                    hasMore: true
                  summary: Testset list with fields
                  description: >-
                    Example response showing a paginated list of Testsets with schema and field mapping
                    details.
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/ServiceError"
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              // Automatically fetches more pages as needed.
              for await (const testset of client.testsets.list('314')) {
                console.log(testset.id);
              }
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecard_ai import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            page = client.testsets.list(
                project_id="314",
            )
            page = page.data[0]
            print(page.id)
    post:
      operationId: createTestset
      summary: Create Testset
      description: Create a new Testset for a Project. The Testset will be created in the Project specified in the path.
      parameters:
        - in: path
          name: projectId
          description: The ID of the Project to create the Testset in.
          schema:
            type: string
            example: "314"
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the Testset.
                description:
                  type: string
                  description: The description of the Testset.
                jsonSchema:
                  type: object
                  description: The JSON schema for each Testcase in the Testset.
                  additionalProperties: true
                fieldMapping:
                  type: object
                  properties:
                    inputs:
                      type: array
                      items:
                        type: string
                      description: Fields that represent inputs to the AI system.
                    labels:
                      type: array
                      items:
                        type: string
                      description: Fields that represent expected outputs/labels.
                    metadata:
                      type: array
                      items:
                        type: string
                      description: Fields that are not inputs or labels.
                  required:
                    - inputs
                    - labels
                    - metadata
                  description: >-
                    Maps top-level keys of the Testcase schema to their roles (input/label). Unmapped fields
                    are treated as metadata.
              required:
                - name
                - description
                - jsonSchema
                - fieldMapping
            examples:
              Create Q&A Testset:
                value:
                  name: Long Context Q&A
                  description: Testset for long context Q&A chatbot.
                  jsonSchema:
                    type: object
                    properties:
                      question:
                        type: string
                      idealAnswer:
                        type: string
                      provenance:
                        type: string
                      geo:
                        type: string
                  fieldMapping:
                    inputs:
                      - question
                    labels:
                      - idealAnswer
                    metadata: []
                summary: Create Q&A Testset
                description: >-
                  Request to create a Testset for evaluating long context Q&A with fields for the question,
                  ideal answer, and metadata like provenance and geographical context.
      responses:
        "201":
          description: Testset created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Testset"
              examples:
                Created Testset response:
                  value:
                    id: "246"
                    name: Long Context Q&A
                    description: Testset for long context Q&A chatbot.
                    jsonSchema:
                      type: object
                      properties:
                        question:
                          type: string
                        idealAnswer:
                          type: string
                        provenance:
                          type: string
                        geo:
                          type: string
                    fieldMapping:
                      inputs:
                        - question
                      labels:
                        - idealAnswer
                      metadata:
                        - provenance
                        - geo
                  summary: Created Testset response
                  description: >-
                    Response after successfully creating a Testset, showing the assigned ID and complete
                    schema with automatically populated field mappings.
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/ServiceError"
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const testset = await client.testsets.create('314', {
                description: 'Testset for long context Q&A chatbot.',
                fieldMapping: { inputs: ['question'], labels: ['idealAnswer'], metadata: [] },
                jsonSchema: {
                  type: 'object',
                  properties: {
                    question: { type: 'string' },
                    idealAnswer: { type: 'string' },
                    provenance: { type: 'string' },
                    geo: { type: 'string' },
                  },
                },
                name: 'Long Context Q&A',
              });

              console.log(testset.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecard_ai import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            testset = client.testsets.create(
                project_id="314",
                description="Testset for long context Q&A chatbot.",
                field_mapping={
                    "inputs": ["question"],
                    "labels": ["idealAnswer"],
                    "metadata": [],
                },
                json_schema={
                    "type": "object",
                    "properties": {
                        "question": {
                            "type": "string"
                        },
                        "idealAnswer": {
                            "type": "string"
                        },
                        "provenance": {
                            "type": "string"
                        },
                        "geo": {
                            "type": "string"
                        },
                    },
                },
                name="Long Context Q&A",
            )
            print(testset.id)
  /testsets/{testsetId}:
    get:
      operationId: getTestset
      summary: Get Testset by ID
      parameters:
        - in: path
          name: testsetId
          description: The ID of the Testset.
          schema:
            type: string
            example: "246"
          required: true
      responses:
        "200":
          description: Successfully retrieved Testset
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Testset"
              examples:
                Complete Testset details:
                  value:
                    id: "246"
                    name: Long Context Q&A
                    description: Testset for long context Q&A chatbot.
                    jsonSchema:
                      type: object
                      properties:
                        question:
                          type: string
                        idealAnswer:
                          type: string
                        provenance:
                          type: string
                        geo:
                          type: string
                    fieldMapping:
                      inputs:
                        - question
                      labels:
                        - idealAnswer
                      metadata:
                        - provenance
                        - geo
                  summary: Complete Testset details
                  description: >-
                    Example response showing all details of a Testset including its schema definition and
                    field mappings.
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/ServiceError"
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const testset = await client.testsets.get('246');

              console.log(testset.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecard_ai import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            testset = client.testsets.get(
                "246",
            )
            print(testset.id)
    patch:
      operationId: updateTestset
      summary: Update Testset
      description: >-
        Update a Testset. Only the fields provided in the request body will be updated.

        If a field is provided, the new content will replace the existing content.

        If a field is not provided, the existing content will remain unchanged.


        When updating the schema:

        - If field mappings are not provided and existing mappings reference fields that no longer exist,
        those mappings will be automatically removed

        - To preserve all existing mappings, ensure all referenced fields remain in the updated schema

        - For complete control, provide both schema and fieldMapping when updating the schema
      parameters:
        - in: path
          name: testsetId
          description: The ID of the Testset to update.
          schema:
            type: string
            example: "246"
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the Testset.
                description:
                  type: string
                  description: The description of the Testset.
                jsonSchema:
                  type: object
                  description: The JSON schema for each Testcase in the Testset.
                  additionalProperties: true
                fieldMapping:
                  type: object
                  properties:
                    inputs:
                      type: array
                      items:
                        type: string
                      description: Fields that represent inputs to the AI system.
                    labels:
                      type: array
                      items:
                        type: string
                      description: Fields that represent expected outputs/labels.
                    metadata:
                      type: array
                      items:
                        type: string
                      description: Fields that are not inputs or labels.
                  required:
                    - inputs
                    - labels
                    - metadata
                  description: >-
                    Maps top-level keys of the Testcase schema to their roles (input/label). Unmapped fields
                    are treated as metadata.
            examples:
              Update metadata only:
                value:
                  name: Updated Q&A Testset
                  description: Updated description for the Q&A Testset.
                summary: Update metadata only
                description: >-
                  Simple metadata update without changing schema or mappings. Updates only the name and
                  description fields while preserving the existing schema and field mappings.
              Remove schema field:
                value:
                  jsonSchema:
                    type: object
                    properties:
                      question:
                        type: string
                      idealAnswer:
                        type: string
                      provenance:
                        type: string
                summary: Remove schema field
                description: >-
                  This request removes the 'geo' field that existed in the original schema, but doesn't
                  explicitly update the field mappings. Scorecard will automatically remove any field mappings
                  that reference deleted fields.
              Full schema revision:
                value:
                  jsonSchema:
                    type: object
                    properties:
                      question:
                        type: string
                      idealAnswer:
                        type: string
                      provenance:
                        type: string
                  fieldMapping:
                    inputs:
                      - question
                    labels:
                      - idealAnswer
                    metadata: []
                summary: Full schema revision
                description: >-
                  Explicit update of both schema and field mappings, allowing complete control over the
                  Testset structure. This example removes the 'geo' field and explicitly updates the field
                  mappings to exclude 'provenance' from metadata.
      responses:
        "200":
          description: Testset updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Testset"
              examples:
                Updated metadata only:
                  value:
                    id: "246"
                    name: Updated Q&A Testset
                    description: Updated description for the Q&A Testset.
                    jsonSchema:
                      type: object
                      properties:
                        question:
                          type: string
                        idealAnswer:
                          type: string
                        provenance:
                          type: string
                        geo:
                          type: string
                    fieldMapping:
                      inputs:
                        - question
                      labels:
                        - idealAnswer
                      metadata:
                        - provenance
                        - geo
                  summary: Updated metadata only
                  description: >-
                    Result after updating only the Testset's name and description. All schema fields and
                    mappings remain unchanged.
                Auto-updated mappings:
                  value:
                    id: "246"
                    name: Long Context Q&A
                    description: Testset for long context Q&A chatbot.
                    jsonSchema:
                      type: object
                      properties:
                        question:
                          type: string
                        idealAnswer:
                          type: string
                        provenance:
                          type: string
                    fieldMapping:
                      inputs:
                        - question
                      labels:
                        - idealAnswer
                      metadata:
                        - provenance
                  summary: Auto-updated mappings
                  description: >-
                    Result after schema update with automatic field mapping cleanup. The 'geo' field has been
                    automatically removed from the metadata mapping since it no longer exists in the schema.
                Custom field mapping:
                  value:
                    id: "246"
                    name: Long Context Q&A
                    description: Testset for long context Q&A chatbot.
                    jsonSchema:
                      type: object
                      properties:
                        question:
                          type: string
                        idealAnswer:
                          type: string
                        provenance:
                          type: string
                    fieldMapping:
                      inputs:
                        - question
                      labels:
                        - idealAnswer
                      metadata: []
                  summary: Custom field mapping
                  description: >-
                    Result after explicit schema and field mapping update. Note that 'provenance' is not
                    included in metadata since it wasn't specified in the request's field mapping.
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/ServiceError"
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const testset = await client.testsets.update('246', {
                description: 'Updated description for the Q&A Testset.',
                name: 'Updated Q&A Testset',
              });

              console.log(testset.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecard_ai import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            testset = client.testsets.update(
                testset_id="246",
                description="Updated description for the Q&A Testset.",
                name="Updated Q&A Testset",
            )
            print(testset.id)
    delete:
      operationId: deleteTestset
      summary: Delete Testset
      parameters:
        - in: path
          name: testsetId
          description: The ID of the Testset to delete.
          schema:
            type: string
            example: "246"
          required: true
      responses:
        "200":
          description: Testset deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the deletion was successful.
                required:
                  - success
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/ServiceError"
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const testset = await client.testsets.delete('246');

              console.log(testset.success);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecard_ai import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            testset = client.testsets.delete(
                "246",
            )
            print(testset.success)
  /testsets/{testsetId}/testcases:
    get:
      operationId: listTestcases
      summary: Get Testcases in Testset
      description: Retrieve a paginated list of Testcases belonging to a Testset.
      parameters:
        - in: path
          name: testsetId
          description: The ID of the Testset to list Testcases from.
          schema:
            type: string
            example: "246"
          required: true
        - in: query
          name: limit
          description: Maximum number of items to return (1-100). Use with `cursor` for pagination through large sets.
          schema:
            type: integer
            exclusiveMinimum: 0
            default: 20
            example: 20
        - in: query
          name: cursor
          description: >-
            Cursor for pagination. Pass the `nextCursor` from the previous response to get the next page of
            results.
          schema:
            type: string
            example: "123"
      responses:
        "200":
          description: Successfully retrieved list of Testcases.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Testcase"
                  nextCursor:
                    type:
                      - string
                      - "null"
                  hasMore:
                    type: boolean
                  total:
                    type: integer
                    minimum: 0
                required:
                  - data
                  - nextCursor
                  - hasMore
              examples:
                Testcase list with pagination:
                  value:
                    data:
                      - id: "123"
                        testsetId: "246"
                        jsonData:
                          question: What is the capital of France?
                          idealAnswer: Paris
                          provenance: hand_curated
                        inputs:
                          question: What is the capital of France?
                        labels:
                          idealAnswer: Paris
                      - id: "124"
                        testsetId: "246"
                        jsonData:
                          question: What is the largest planet in our solar system?
                          idealAnswer: Jupiter
                          provenance: synthetic
                        inputs:
                          question: What is the largest planet in our solar system?
                        labels:
                          idealAnswer: Jupiter
                      - id: "125"
                        testsetId: "246"
                        jsonData:
                          question: What is the deepest ocean on Earth?
                          provenance: user_feedback
                        inputs:
                          question: What is the deepest ocean on Earth?
                        labels: {}
                        validationErrors:
                          - path: /data
                            message: Required field 'idealAnswer' is missing
                    nextCursor: "126"
                    hasMore: true
                  summary: Testcase list with pagination
                  description: Example response showing a paginated list of Testcases.
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/ServiceError"
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              // Automatically fetches more pages as needed.
              for await (const testcase of client.testcases.list('246')) {
                console.log(testcase.id);
              }
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecard_ai import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            page = client.testcases.list(
                testset_id="246",
            )
            page = page.data[0]
            print(page.id)
    post:
      operationId: createTestcases
      summary: Create multiple Testcases
      description: Create multiple Testcases in the specified Testset.
      parameters:
        - in: path
          name: testsetId
          description: The ID of the Testset to add the Testcases to.
          schema:
            type: string
            example: "246"
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      jsonData:
                        type: object
                        additionalProperties: true
                        description: The JSON data of the Testcase, which is validated against the Testset's schema.
                    required:
                      - jsonData
                    description: >-
                      A test case in the Scorecard system. Contains JSON data that is validated against the
                      schema defined by its Testset.

                      The `inputs` and `labels` fields are derived from the `data` field based on the
                      Testset's `fieldMapping`, and include all mapped fields, including those with validation
                      errors.

                      Testcases are stored regardless of validation results, with any validation errors
                      included in the `validationErrors` field.
                  minItems: 1
                  maxItems: 100
                  description: Testcases to create (max 100).
              required:
                - items
            examples:
              Create multiple Testcases:
                value:
                  items:
                    - jsonData:
                        question: What is the capital of France?
                        idealAnswer: Paris
                        provenance: hand_curated
                    - jsonData:
                        question: What is the largest planet in our solar system?
                        idealAnswer: Jupiter
                        provenance: synthetic
                    - jsonData:
                        question: How many planets are in our solar system?
                        idealAnswer: 8
                        provenance: user_feedback
                      validationErrors:
                        - path: /data/idealAnswer
                          message: Expected string, received number
                summary: Create multiple Testcases
                description: Create multiple Testcases in a single request.
      responses:
        "201":
          description: Testcases created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Testcase"
                required:
                  - items
              examples:
                Created Testcases response:
                  value:
                    items:
                      - id: "123"
                        testsetId: "246"
                        jsonData:
                          question: What is the capital of France?
                          idealAnswer: Paris
                          provenance: hand_curated
                        inputs:
                          question: What is the capital of France?
                        labels:
                          idealAnswer: Paris
                      - id: "124"
                        testsetId: "246"
                        jsonData:
                          question: What is the largest planet in our solar system?
                          idealAnswer: Jupiter
                          provenance: synthetic
                        inputs:
                          question: What is the largest planet in our solar system?
                        labels:
                          idealAnswer: Jupiter
                      - id: "125"
                        testsetId: "246"
                        jsonData:
                          question: How many planets are in our solar system?
                          idealAnswer: 8
                          provenance: user_feedback
                        inputs:
                          question: How many planets are in our solar system?
                        labels:
                          idealAnswer: 8
                        validationErrors:
                          - path: /data/idealAnswer
                            message: Expected string, received number
                  summary: Created Testcases
                  description: Example response showing successfully created Testcases.
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/ServiceError"
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const testcase = await client.testcases.create('246', {
                items: [
                  {
                    jsonData: {
                      question: 'What is the capital of France?',
                      idealAnswer: 'Paris',
                      provenance: 'hand_curated',
                    },
                  },
                  {
                    jsonData: {
                      question: 'What is the largest planet in our solar system?',
                      idealAnswer: 'Jupiter',
                      provenance: 'synthetic',
                    },
                  },
                  {
                    jsonData: {
                      question: 'How many planets are in our solar system?',
                      idealAnswer: 8,
                      provenance: 'user_feedback',
                    },
                    validationErrors: [{ path: '/data/idealAnswer', message: 'Expected string, received number' }],
                  },
                ],
              });

              console.log(testcase.items);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecard_ai import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            testcase = client.testcases.create(
                testset_id="246",
                items=[{
                    "json_data": {
                        "question": "What is the capital of France?",
                        "idealAnswer": "Paris",
                        "provenance": "hand_curated",
                    }
                }, {
                    "json_data": {
                        "question": "What is the largest planet in our solar system?",
                        "idealAnswer": "Jupiter",
                        "provenance": "synthetic",
                    }
                }, {
                    "json_data": {
                        "question": "How many planets are in our solar system?",
                        "idealAnswer": 8,
                        "provenance": "user_feedback",
                    },
                    "validation_errors": [{
                        "path": "/data/idealAnswer",
                        "message": "Expected string, received number",
                    }],
                }],
            )
            print(testcase.items)
  /testcases/{testcaseId}:
    get:
      operationId: getTestcase
      summary: Get Testcase
      description: Retrieve a specific Testcase by ID.
      parameters:
        - in: path
          name: testcaseId
          description: The ID of the Testcase to retrieve.
          schema:
            type: string
            example: "248"
          required: true
      responses:
        "200":
          description: Successfully retrieved Testcase.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Testcase"
              examples:
                Testcase details:
                  value:
                    id: "248"
                    testsetId: "246"
                    jsonData:
                      question: What is the capital of France?
                      idealAnswer: Paris
                      provenance: hand_curated
                    inputs:
                      question: What is the capital of France?
                    labels:
                      idealAnswer: Paris
                  summary: Testcase details
                  description: Example response showing a Testcase's details.
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/ServiceError"
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const testcase = await client.testcases.get('248');

              console.log(testcase.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecard_ai import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            testcase = client.testcases.get(
                "248",
            )
            print(testcase.id)
    put:
      operationId: updateTestcase
      summary: Update Testcase
      description: Replace the data of an existing Testcase while keeping its ID.
      parameters:
        - in: path
          name: testcaseId
          description: The ID of the Testcase to update.
          schema:
            type: string
            example: "248"
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                jsonData:
                  type: object
                  additionalProperties: true
                  description: The JSON data of the Testcase, which is validated against the Testset's schema.
              required:
                - jsonData
            examples:
              Update Testcase data:
                value:
                  jsonData:
                    question: What is the capital of France?
                    idealAnswer: Paris is the capital of France
                    provenance: hand_curated
                summary: Update Testcase data
                description: Update the content of a Testcase with improved information.
      responses:
        "200":
          description: Testcase updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Testcase"
              examples:
                Updated Testcase:
                  value:
                    id: "248"
                    testsetId: "246"
                    jsonData:
                      question: What is the capital of France?
                      idealAnswer: Paris is the capital of France
                      provenance: hand_curated
                    inputs:
                      question: What is the capital of France?
                    labels:
                      idealAnswer: Paris is the capital of France
                  summary: Updated Testcase
                  description: Example response showing a successfully updated Testcase.
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/ServiceError"
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const testcase = await client.testcases.update('248', {
                jsonData: {
                  question: 'What is the capital of France?',
                  idealAnswer: 'Paris is the capital of France',
                  provenance: 'hand_curated',
                },
              });

              console.log(testcase.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecard_ai import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            testcase = client.testcases.update(
                testcase_id="248",
                json_data={
                    "question": "What is the capital of France?",
                    "idealAnswer": "Paris is the capital of France",
                    "provenance": "hand_curated",
                },
            )
            print(testcase.id)
  /testcases/bulk-delete:
    post:
      operationId: deleteTestcases
      summary: Delete multiple Testcases
      description: Delete multiple Testcases by their IDs.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
                  description: IDs of Testcases to delete.
              required:
                - ids
            examples:
              Delete multiple Testcases:
                value:
                  ids:
                    - "123"
                    - "124"
                    - "125"
      responses:
        "200":
          description: Testcases deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the deletion was successful.
                required:
                  - success
              examples:
                Delete multiple Testcases:
                  value:
                    success: true
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/ServiceError"
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const testcase = await client.testcases.delete({ ids: ['123', '124', '125'] });

              console.log(testcase.success);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecard_ai import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            testcase = client.testcases.delete(
                ids=["123", "124", "125"],
            )
            print(testcase.success)
  /projects/{projectId}/runs:
    post:
      operationId: createRun
      summary: Create Run
      description: Create a new Run.
      parameters:
        - in: path
          name: projectId
          description: The ID of the Project.
          schema:
            type: string
            example: "314"
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                testsetId:
                  type: string
                  description: The ID of the Testset this Run is testing.
                systemConfigId:
                  type: string
                  format: uuid
                  description: The ID of the system configuration this Run is using.
                metricIds:
                  type: array
                  items:
                    type: string
                  description: The IDs of the metrics this Run is using.
              required:
                - testsetId
                - metricIds
            examples:
              Create Run with metrics:
                value:
                  testsetId: "246"
                  systemConfigId: 87654321-4d3b-4ae4-8c7a-4b6e2a19ccf0
                  metricIds:
                    - "789"
                    - "101"
                summary: Create Run with metrics
                description: Request to create a Run with metrics.
      responses:
        "201":
          description: Run created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
              examples:
                Created Run with metrics:
                  value:
                    id: "135"
                    testsetId: "246"
                    systemConfigId: 87654321-4d3b-4ae4-8c7a-4b6e2a19ccf0
                    metricIds:
                      - "789"
                      - "101"
                  summary: Created Run
                  description: Response after successfully creating a Run.
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/ServiceError"
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const run = await client.runs.create('314', {
                metricIds: ['789', '101'],
                testsetId: '246',
                systemConfigId: '87654321-4d3b-4ae4-8c7a-4b6e2a19ccf0',
              });

              console.log(run.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecard_ai import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            run = client.runs.create(
                project_id="314",
                metric_ids=["789", "101"],
                testset_id="246",
                system_config_id="87654321-4d3b-4ae4-8c7a-4b6e2a19ccf0",
            )
            print(run.id)
  /runs/{runId}:
    patch:
      operationId: updateRun
      summary: Update Run status
      description: Update the status of a Run.
      parameters:
        - in: path
          name: runId
          description: The ID of the Run to update.
          schema:
            type: string
            example: "135"
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: &ref_0
                    - pending
                    - awaiting_execution
                    - running_execution
                    - awaiting_scoring
                    - running_scoring
                    - awaiting_human_scoring
                    - completed
                  description: The status of the Run.
              required:
                - status
            examples:
              Update Run status:
                value:
                  status: awaiting_scoring
                summary: Update Run after execution
                description: Request to update the status of a Run to `awaiting_scoring`.
      responses:
        "200":
          description: Run updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: The ID of the Run.
                  status:
                    type: string
                    enum: *ref_0
                    description: The status of the Run.
                required:
                  - id
                  - status
              examples:
                Updated Run status:
                  value:
                    id: "135"
                    status: awaiting_scoring
                  summary: Updated Run status
                  description: Response after successfully updating the status of a Run.
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/ServiceError"
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const run = await client.runs.update('135', { status: 'awaiting_scoring' });

              console.log(run.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecard_ai import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            run = client.runs.update(
                run_id="135",
                status="awaiting_scoring",
            )
            print(run.id)
  /runs/{runId}/records:
    post:
      operationId: createRecord
      summary: Create Record
      description: Create a new Record in a Run.
      parameters:
        - in: path
          name: runId
          description: The ID of the Run.
          schema:
            type: string
            example: "135"
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                testcaseId:
                  type: string
                  description: The ID of the Testcase.
                inputs:
                  type: object
                  additionalProperties: true
                  description: The actual inputs sent to the system, which should match the system's input schema.
                labels:
                  type: object
                  additionalProperties: true
                  description: The expected outputs for the Testcase.
                outputs:
                  type: object
                  additionalProperties: true
                  description: The actual outputs from the system.
              required:
                - inputs
                - labels
                - outputs
            examples:
              Create Record:
                value:
                  testcaseId: "248"
                  inputs:
                    question: What is the capital of France?
                  labels:
                    idealAnswer: Paris is the capital of France
                  outputs:
                    response: The capital of France is Paris.
                summary: Create Record
                description: Request to create a Record.
      responses:
        "201":
          description: Record created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Record"
              examples:
                Created Record:
                  value:
                    id: "135"
                    testcaseId: "248"
                    inputs:
                      question: What is the capital of France?
                    labels:
                      idealAnswer: Paris is the capital of France
                    outputs:
                      response: The capital of France is Paris.
                  summary: Created Record
                  description: Response after successfully creating a Record.
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/ServiceError"
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const record = await client.records.create('135', {
                inputs: { question: 'What is the capital of France?' },
                labels: { idealAnswer: 'Paris is the capital of France' },
                outputs: { response: 'The capital of France is Paris.' },
                testcaseId: '248',
              });

              console.log(record.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecard_ai import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            record = client.records.create(
                run_id="135",
                inputs={
                    "question": "What is the capital of France?"
                },
                labels={
                    "idealAnswer": "Paris is the capital of France"
                },
                outputs={
                    "response": "The capital of France is Paris."
                },
                testcase_id="248",
            )
            print(record.id)
  /projects/{projectId}/systems:
    get:
      operationId: listSystems
      summary: Get systems
      description: Retrieve a paginated list of all systems. Systems are ordered by creation date.
      parameters:
        - in: path
          name: projectId
          description: The ID of the system's Project.
          schema:
            type: string
            example: "314"
          required: true
        - in: query
          name: limit
          description: Maximum number of items to return (1-100). Use with `cursor` for pagination through large sets.
          schema:
            type: integer
            exclusiveMinimum: 0
            default: 20
            example: 20
        - in: query
          name: cursor
          description: >-
            Cursor for pagination. Pass the `nextCursor` from the previous response to get the next page of
            results.
          schema:
            type: string
            example: eyJvZmZzZXQiOjAsInBhZ2VJZCI6ImNvZGUifQ
      responses:
        "200":
          description: Successfully retrieved list of systems.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/System"
                  nextCursor:
                    type:
                      - string
                      - "null"
                  hasMore:
                    type: boolean
                  total:
                    type: integer
                    minimum: 0
                required:
                  - data
                  - nextCursor
                  - hasMore
              examples:
                System list with pagination:
                  value:
                    data:
                      - id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                        name: GPT-4 Chatbot
                        description: Production chatbot powered by GPT-4
                        inputSchema:
                          type: object
                          properties:
                            messages:
                              type: array
                              items:
                                type: object
                                properties:
                                  role:
                                    type: string
                                    enum:
                                      - system
                                      - user
                                      - assistant
                                  content:
                                    type: string
                                required:
                                  - role
                                  - content
                          required:
                            - messages
                        outputSchema:
                          type: object
                          properties:
                            response:
                              type: string
                          required:
                            - response
                        configSchema:
                          type: object
                          properties:
                            temperature:
                              type: number
                            maxTokens:
                              type: integer
                            model:
                              type: string
                              enum:
                                - gpt-4
                                - gpt-4-turbo
                          required:
                            - model
                      - id: 8fb15f74-2918-4982-a4fc-9c157f77dca7
                        name: RAG System
                        description: Retrieval-augmented generation system for company knowledge base
                        inputSchema:
                          type: object
                          properties:
                            query:
                              type: string
                            contextLength:
                              type: integer
                          required:
                            - query
                        outputSchema:
                          type: object
                          properties:
                            answer:
                              type: string
                            citations:
                              type: array
                              items:
                                type: object
                                properties:
                                  documentId:
                                    type: string
                                  relevanceScore:
                                    type: number
                          required:
                            - answer
                        configSchema:
                          type: object
                          properties:
                            vectorDbEndpoint:
                              type: string
                            embeddingModel:
                              type: string
                            generationModel:
                              type: string
                            retrievalTopK:
                              type: integer
                          required:
                            - vectorDbEndpoint
                            - generationModel
                    nextCursor: 8fb15f74-2918-4982-a4fc-9c157f77dca8
                    hasMore: true
                  summary: System list with pagination
                  description: >-
                    Example response showing a paginated list of two systems with their contracts - a simple
                    chatbot and a RAG system.
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/ServiceError"
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              // Automatically fetches more pages as needed.
              for await (const system of client.systems.list('314')) {
                console.log(system.id);
              }
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecard_ai import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            page = client.systems.list(
                project_id="314",
            )
            page = page.data[0]
            print(page.id)
    post:
      operationId: createSystem
      summary: Create system
      description: >-
        Create a new system definition that specifies the interface contracts for a component you want to
        evaluate.


        A system acts as a template that defines three key contracts through JSON Schemas:

        1. Input Schema: What data your system accepts (e.g., user queries, context documents)

        2. Output Schema: What data your system produces (e.g., responses, confidence scores)

        3. Config Schema: What parameters can be adjusted (e.g., model selection, temperature)


        This separation lets you evaluate any system as a black box, focusing on its interface rather than
        implementation details.
      parameters:
        - in: path
          name: projectId
          description: The ID of the system's Project.
          schema:
            type: string
            example: "314"
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the system.
                description:
                  type: string
                  description: The description of the system.
                inputSchema:
                  type: object
                  description: The schema of the system's inputs.
                  additionalProperties: true
                outputSchema:
                  type: object
                  description: The schema of the system's outputs.
                  additionalProperties: true
                configSchema:
                  type: object
                  description: The schema of the system's configuration.
                  additionalProperties: true
              required:
                - name
                - description
                - inputSchema
                - outputSchema
                - configSchema
            examples:
              Create chatbot system:
                value:
                  name: GPT-4 Chatbot
                  description: Production chatbot powered by GPT-4
                  inputSchema:
                    type: object
                    properties:
                      messages:
                        type: array
                        items:
                          type: object
                          properties:
                            role:
                              type: string
                              enum:
                                - system
                                - user
                                - assistant
                            content:
                              type: string
                          required:
                            - role
                            - content
                    required:
                      - messages
                  outputSchema:
                    type: object
                    properties:
                      response:
                        type: string
                    required:
                      - response
                  configSchema:
                    type: object
                    properties:
                      temperature:
                        type: number
                      maxTokens:
                        type: integer
                      model:
                        type: string
                        enum:
                          - gpt-4
                          - gpt-4-turbo
                    required:
                      - model
                summary: Create chatbot system
                description: >-
                  Create a system definition for a GPT-4 powered chatbot with schemas for chat message inputs,
                  text response outputs, and configurable parameters like temperature and model version.
              Create RAG system:
                value:
                  name: RAG System
                  description: Retrieval-augmented generation system for company knowledge base
                  inputSchema:
                    type: object
                    properties:
                      query:
                        type: string
                      contextLength:
                        type: integer
                    required:
                      - query
                  outputSchema:
                    type: object
                    properties:
                      answer:
                        type: string
                      citations:
                        type: array
                        items:
                          type: object
                          properties:
                            documentId:
                              type: string
                            relevanceScore:
                              type: number
                    required:
                      - answer
                  configSchema:
                    type: object
                    properties:
                      vectorDbEndpoint:
                        type: string
                      embeddingModel:
                        type: string
                      generationModel:
                        type: string
                      retrievalTopK:
                        type: integer
                    required:
                      - vectorDbEndpoint
                      - generationModel
                summary: Create RAG system
                description: >-
                  Create a system definition for a retrieval-augmented generation system that expects query
                  inputs, produces answers with citations, and can be configured with different embedding and
                  generation models.
      responses:
        "201":
          description: System created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/System"
              examples:
                Created system response:
                  value:
                    id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                    name: GPT-4 Chatbot
                    description: Production chatbot powered by GPT-4
                    inputSchema:
                      type: object
                      properties:
                        messages:
                          type: array
                          items:
                            type: object
                            properties:
                              role:
                                type: string
                                enum:
                                  - system
                                  - user
                                  - assistant
                              content:
                                type: string
                            required:
                              - role
                              - content
                      required:
                        - messages
                    outputSchema:
                      type: object
                      properties:
                        response:
                          type: string
                      required:
                        - response
                    configSchema:
                      type: object
                      properties:
                        temperature:
                          type: number
                        maxTokens:
                          type: integer
                        model:
                          type: string
                          enum:
                            - gpt-4
                            - gpt-4-turbo
                      required:
                        - model
                  summary: Created system response
                  description: Response after successfully creating a system definition for a GPT-4 chatbot.
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/ServiceError"
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const system = await client.systems.create('314', {
                configSchema: {
                  type: 'object',
                  properties: {
                    temperature: { type: 'number' },
                    maxTokens: { type: 'integer' },
                    model: { type: 'string', enum: ['gpt-4', 'gpt-4-turbo'] },
                  },
                  required: ['model'],
                },
                description: 'Production chatbot powered by GPT-4',
                inputSchema: {
                  type: 'object',
                  properties: {
                    messages: {
                      type: 'array',
                      items: {
                        type: 'object',
                        properties: {
                          role: { type: 'string', enum: ['system', 'user', 'assistant'] },
                          content: { type: 'string' },
                        },
                        required: ['role', 'content'],
                      },
                    },
                  },
                  required: ['messages'],
                },
                name: 'GPT-4 Chatbot',
                outputSchema: { type: 'object', properties: { response: { type: 'string' } }, required: ['response'] },
              });

              console.log(system.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecard_ai import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            system = client.systems.create(
                project_id="314",
                config_schema={
                    "type": "object",
                    "properties": {
                        "temperature": {
                            "type": "number"
                        },
                        "maxTokens": {
                            "type": "integer"
                        },
                        "model": {
                            "type": "string",
                            "enum": ["gpt-4", "gpt-4-turbo"],
                        },
                    },
                    "required": ["model"],
                },
                description="Production chatbot powered by GPT-4",
                input_schema={
                    "type": "object",
                    "properties": {
                        "messages": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "role": {
                                        "type": "string",
                                        "enum": ["system", "user", "assistant"],
                                    },
                                    "content": {
                                        "type": "string"
                                    },
                                },
                                "required": ["role", "content"],
                            },
                        }
                    },
                    "required": ["messages"],
                },
                name="GPT-4 Chatbot",
                output_schema={
                    "type": "object",
                    "properties": {
                        "response": {
                            "type": "string"
                        }
                    },
                    "required": ["response"],
                },
            )
            print(system.id)
  /systems/{systemId}:
    get:
      operationId: getSystem
      summary: Get system by ID
      description: Retrieve a specific system by ID.
      parameters:
        - in: path
          name: systemId
          description: The ID of the system to retrieve.
          schema:
            type: string
            format: uuid
            example: 12345678-0a8b-4f66-b6f3-2ddcfa097257
          required: true
      responses:
        "200":
          description: Successfully retrieved system.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/System"
              examples:
                Complete system details:
                  value:
                    id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                    name: GPT-4 Chatbot
                    description: Production chatbot powered by GPT-4
                    inputSchema:
                      type: object
                      properties:
                        messages:
                          type: array
                          items:
                            type: object
                            properties:
                              role:
                                type: string
                                enum:
                                  - system
                                  - user
                                  - assistant
                              content:
                                type: string
                            required:
                              - role
                              - content
                      required:
                        - messages
                    outputSchema:
                      type: object
                      properties:
                        response:
                          type: string
                      required:
                        - response
                    configSchema:
                      type: object
                      properties:
                        temperature:
                          type: number
                        maxTokens:
                          type: integer
                        model:
                          type: string
                          enum:
                            - gpt-4
                            - gpt-4-turbo
                      required:
                        - model
                  summary: Complete system details
                  description: >-
                    Example response showing all details of a system including its input, output, and
                    configuration schema contracts.
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/ServiceError"
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const system = await client.systems.get('12345678-0a8b-4f66-b6f3-2ddcfa097257');

              console.log(system.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecard_ai import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            system = client.systems.get(
                "12345678-0a8b-4f66-b6f3-2ddcfa097257",
            )
            print(system.id)
    patch:
      operationId: updateSystem
      summary: Update system
      description: |-
        Update an existing system definition. Only the fields provided in the request body will be updated.
        If a field is provided, the new content will replace the existing content.
        If a field is not provided, the existing content will remain unchanged.

        When updating schemas:
        - The system will accept your changes regardless of compatibility with existing configurations
        - Schema updates won't invalidate existing evaluations or configurations
        - For significant redesigns, creating a new system definition provides a cleaner separation
      parameters:
        - in: path
          name: systemId
          description: The ID of the system to update.
          schema:
            type: string
            format: uuid
            example: 12345678-0a8b-4f66-b6f3-2ddcfa097257
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the system.
                description:
                  type: string
                  description: The description of the system.
                inputSchema:
                  type: object
                  description: The schema of the system's inputs.
                  additionalProperties: true
                outputSchema:
                  type: object
                  description: The schema of the system's outputs.
                  additionalProperties: true
                configSchema:
                  type: object
                  description: The schema of the system's configuration.
                  additionalProperties: true
            examples:
              Update system metadata:
                value:
                  name: GPT-4 Turbo Chatbot
                  description: Updated production chatbot powered by GPT-4 Turbo
                summary: Update system metadata
                description: >-
                  Simple metadata update without changing schemas. Updates only the name and description
                  fields while preserving the existing schemas.
              Update config schema:
                value:
                  configSchema:
                    type: object
                    properties:
                      temperature:
                        type: number
                      maxTokens:
                        type: integer
                      model:
                        type: string
                        enum:
                          - gpt-4
                          - gpt-4-turbo
                          - gpt-4-vision
                      systemPrompt:
                        type: string
                    required:
                      - model
                summary: Update config schema
                description: >-
                  Updates the configuration schema to add support for a new model option and a systemPrompt
                  parameter.
      responses:
        "200":
          description: System updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/System"
              examples:
                Updated system:
                  value:
                    id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                    name: GPT-4 Turbo Chatbot
                    description: Updated production chatbot powered by GPT-4 Turbo
                    inputSchema:
                      type: object
                      properties:
                        messages:
                          type: array
                          items:
                            type: object
                            properties:
                              role:
                                type: string
                                enum:
                                  - system
                                  - user
                                  - assistant
                              content:
                                type: string
                            required:
                              - role
                              - content
                      required:
                        - messages
                    outputSchema:
                      type: object
                      properties:
                        response:
                          type: string
                      required:
                        - response
                    configSchema:
                      type: object
                      properties:
                        temperature:
                          type: number
                        maxTokens:
                          type: integer
                        model:
                          type: string
                          enum:
                            - gpt-4
                            - gpt-4-turbo
                            - gpt-4-vision
                        systemPrompt:
                          type: string
                      required:
                        - model
                  summary: Updated system
                  description: Result after updating both the metadata and the configuration schema of the system.
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/ServiceError"
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const system = await client.systems.update('12345678-0a8b-4f66-b6f3-2ddcfa097257', {
                description: 'Updated production chatbot powered by GPT-4 Turbo',
                name: 'GPT-4 Turbo Chatbot',
              });

              console.log(system.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecard_ai import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            system = client.systems.update(
                system_id="12345678-0a8b-4f66-b6f3-2ddcfa097257",
                description="Updated production chatbot powered by GPT-4 Turbo",
                name="GPT-4 Turbo Chatbot",
            )
            print(system.id)
    delete:
      operationId: deleteSystem
      summary: Delete system
      description: Delete a system definition by ID. This will not delete associated system configurations.
      parameters:
        - in: path
          name: systemId
          description: The ID of the system to delete.
          schema:
            type: string
            format: uuid
            example: 12345678-0a8b-4f66-b6f3-2ddcfa097257
          required: true
      responses:
        "200":
          description: System deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the deletion was successful.
                required:
                  - success
              examples:
                Delete system response:
                  value:
                    success: true
                  summary: Delete system success
                  description: Response indicating successful deletion of the system.
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/ServiceError"
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const system = await client.systems.delete('12345678-0a8b-4f66-b6f3-2ddcfa097257');

              console.log(system.success);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecard_ai import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            system = client.systems.delete(
                "12345678-0a8b-4f66-b6f3-2ddcfa097257",
            )
            print(system.success)
  /systems/{systemId}/configs:
    get:
      operationId: listSystemConfigs
      summary: Get system configurations
      description: >-
        Retrieve a paginated list of configurations for a specific system.


        System configurations provide concrete parameter values for a System Under Test, defining exactly how
        the system should be configured during an evaluation run.
      parameters:
        - in: path
          name: systemId
          description: The ID of the system to list configurations for.
          schema:
            type: string
            format: uuid
            example: 12345678-0a8b-4f66-b6f3-2ddcfa097257
          required: true
        - in: query
          name: limit
          description: Maximum number of items to return (1-100). Use with `cursor` for pagination through large sets.
          schema:
            type: integer
            exclusiveMinimum: 0
            default: 20
            example: 20
        - in: query
          name: cursor
          description: >-
            Cursor for pagination. Pass the `nextCursor` from the previous response to get the next page of
            results.
          schema:
            type: string
            example: eyJvZmZzZXQiOjAsInBhZ2VJZCI6ImNvZGUifQ
      responses:
        "200":
          description: Successfully retrieved list of system configurations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/SystemConfig"
                  nextCursor:
                    type:
                      - string
                      - "null"
                  hasMore:
                    type: boolean
                  total:
                    type: integer
                    minimum: 0
                required:
                  - data
                  - nextCursor
                  - hasMore
              examples:
                System configurations list:
                  value:
                    data:
                      - id: 5fa85f64-5717-4562-b3fc-2c963f66afa7
                        systemId: 12345678-0a8b-4f66-b6f3-2ddcfa097257
                        name: Production (Low Temperature)
                        config:
                          temperature: 0.1
                          maxTokens: 1024
                          model: gpt-4-turbo
                      - id: 6fa85f64-5717-4562-b3fc-2c963f66afa8
                        systemId: 12345678-0a8b-4f66-b6f3-2ddcfa097257
                        name: Production (Balanced)
                        config:
                          temperature: 0.7
                          maxTokens: 1024
                          model: gpt-4-turbo
                      - id: 7fa85f64-5717-4562-b3fc-2c963f66afa9
                        systemId: 12345678-0a8b-4f66-b6f3-2ddcfa097257
                        name: Experimental (GPT-4 Vision)
                        config:
                          temperature: 0.5
                          maxTokens: 2048
                          model: gpt-4-vision
                          systemPrompt: You are a helpful visual assistant.
                      - id: 8fa85f64-5717-4562-b3fc-2c963f66afa9
                        systemId: 12345678-0a8b-4f66-b6f3-2ddcfa097257
                        name: Invalid Config (Wrong Type)
                        config:
                          temperature: "0.5"
                          maxTokens: 2048
                          model: gpt-4-turbo
                        validationErrors:
                          - path: /config/temperature
                            message: Expected number, received string
                    nextCursor: 7fa85f64-5717-4562-b3fc-2c963f66afaa
                    hasMore: false
                  summary: System configurations list
                  description: >-
                    Example response showing a list of configurations for a chatbot system, including
                    production, experimental, and invalid configurations with validation errors.
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/ServiceError"
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              // Automatically fetches more pages as needed.
              for await (const systemConfig of client.systemConfigs.list('12345678-0a8b-4f66-b6f3-2ddcfa097257')) {
                console.log(systemConfig.id);
              }
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecard_ai import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            page = client.system_configs.list(
                system_id="12345678-0a8b-4f66-b6f3-2ddcfa097257",
            )
            page = page.data[0]
            print(page.id)
    post:
      operationId: createSystemConfig
      summary: Create system configuration
      description: >-
        Create a new configuration for a system.


        Each configuration contains specific parameter values that match the system's configSchema - things
        like model parameters, thresholds, or processing options.

        Once created, configurations cannot be modified, ensuring stable reference points for evaluations.


        When creating a configuration:

        - The 'config' object is validated against the parent system's configSchema

        - Configurations with validation errors are still stored, with errors included in the response

        - Validation errors indicate fields that don't match the schema but don't prevent creation

        - Having validation errors may affect how some evaluation metrics are calculated
      parameters:
        - in: path
          name: systemId
          description: The ID of the system to create the configuration for.
          schema:
            type: string
            format: uuid
            example: 12345678-0a8b-4f66-b6f3-2ddcfa097257
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the system configuration.
                config:
                  type: object
                  additionalProperties: true
                  description: The configuration of the system.
                validationErrors:
                  type: array
                  items:
                    type: object
                    properties:
                      path:
                        type: string
                        description: JSON Pointer to the field with the validation error.
                        example: /data/question
                      message:
                        type: string
                        description: Human-readable error description.
                        example: Required field missing
                    required:
                      - path
                      - message
                  description: >-
                    Validation errors found in the configuration. If present, the configuration doesn't fully
                    conform to its system's configSchema.
              required:
                - name
                - config
            examples:
              Create chatbot configuration:
                value:
                  name: Production (Low Temperature)
                  config:
                    temperature: 0.1
                    maxTokens: 1024
                    model: gpt-4-turbo
                summary: Create chatbot configuration
                description: >-
                  Create a configuration for the GPT-4 chatbot system with specific parameter values for
                  temperature, token limit, and model version.
              Create RAG configuration:
                value:
                  name: Production RAG (ada-002 + gpt-4)
                  config:
                    vectorDbEndpoint: https://vector-db.example.com/prod
                    embeddingModel: text-embedding-ada-002
                    generationModel: gpt-4
                    retrievalTopK: 5
                summary: Create RAG configuration
                description: >-
                  Create a configuration for the RAG system specifying the vector database endpoint, embedding
                  model, generation model, and number of documents to retrieve.
              Create configuration with validation errors:
                value:
                  name: Invalid Config Example
                  config:
                    temperature: "0.7"
                    maxTokens: 1024
                    model: gpt-4-experimental
                summary: Create configuration with validation errors
                description: >-
                  Create a configuration with values that don't strictly conform to the system's configSchema.
                  The configuration will still be created but will include validation errors in the response.
      responses:
        "201":
          description: System configuration created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemConfig"
              examples:
                Created system configuration:
                  value:
                    id: 5fa85f64-5717-4562-b3fc-2c963f66afa7
                    systemId: 12345678-0a8b-4f66-b6f3-2ddcfa097257
                    name: Production (Low Temperature)
                    config:
                      temperature: 0.1
                      maxTokens: 1024
                      model: gpt-4-turbo
                  summary: Created system configuration
                  description: Response after successfully creating a system configuration with valid parameters.
                Created configuration with validation errors:
                  value:
                    id: 8fa85f64-5717-4562-b3fc-2c963f66afa9
                    systemId: 12345678-0a8b-4f66-b6f3-2ddcfa097257
                    name: Invalid Config Example
                    config:
                      temperature: "0.7"
                      maxTokens: 1024
                      model: gpt-4-experimental
                    validationErrors:
                      - path: /config/temperature
                        message: Expected number, received string
                      - path: /config/model
                        message: Invalid enum value. Expected 'gpt-4' | 'gpt-4-turbo'
                  summary: Created configuration with validation errors
                  description: >-
                    Response after creating a system configuration with values that don't strictly conform to
                    the configSchema. Note the validationErrors array that details each issue.
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/ServiceError"
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const systemConfig = await client.systemConfigs.create('12345678-0a8b-4f66-b6f3-2ddcfa097257', {
                config: { temperature: 0.1, maxTokens: 1024, model: 'gpt-4-turbo' },
                name: 'Production (Low Temperature)',
              });

              console.log(systemConfig.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecard_ai import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            system_config = client.system_configs.create(
                system_id="12345678-0a8b-4f66-b6f3-2ddcfa097257",
                config={
                    "temperature": 0.1,
                    "maxTokens": 1024,
                    "model": "gpt-4-turbo",
                },
                name="Production (Low Temperature)",
            )
            print(system_config.id)
  /systems/{systemId}/configs/{systemConfigId}:
    get:
      operationId: getSystemConfig
      summary: Get system configuration by ID
      description: Retrieve a specific system configuration by ID.
      parameters:
        - in: path
          name: systemId
          description: The ID of the system the configuration belongs to.
          schema:
            type: string
            format: uuid
            example: 12345678-0a8b-4f66-b6f3-2ddcfa097257
          required: true
        - in: path
          name: systemConfigId
          description: The ID of the system configuration to retrieve.
          schema:
            type: string
            format: uuid
            example: 87654321-4d3b-4ae4-8c7a-4b6e2a19ccf0
          required: true
      responses:
        "200":
          description: Successfully retrieved system configuration.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemConfig"
              examples:
                System configuration details:
                  value:
                    id: 87654321-4d3b-4ae4-8c7a-4b6e2a19ccf0
                    systemId: 12345678-0a8b-4f66-b6f3-2ddcfa097257
                    name: Production (Low Temperature)
                    config:
                      temperature: 0.1
                      maxTokens: 1024
                      model: gpt-4-turbo
                  summary: System configuration details
                  description: Example response showing the complete details of a valid system configuration.
                System configuration with validation errors:
                  value:
                    id: 87654321-4d3b-4ae4-8c7a-4b6e2a19ccf0
                    systemId: 12345678-0a8b-4f66-b6f3-2ddcfa097257
                    name: Invalid Config Example
                    config:
                      temperature: "0.7"
                      maxTokens: 1024
                      model: gpt-4-experimental
                    validationErrors:
                      - path: /config/temperature
                        message: Expected number, received string
                      - path: /config/model
                        message: Invalid enum value. Expected 'gpt-4' | 'gpt-4-turbo'
                  summary: System configuration with validation errors
                  description: >-
                    Example response showing a system configuration with validation errors. The configuration
                    is still usable, but includes details about fields that don't conform to the system's
                    schema.
        "401":
          $ref: "#/components/responses/UnauthenticatedError"
        "500":
          $ref: "#/components/responses/ServiceError"
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const systemConfig = await client.systemConfigs.get('87654321-4d3b-4ae4-8c7a-4b6e2a19ccf0', {
                systemId: '12345678-0a8b-4f66-b6f3-2ddcfa097257',
              });

              console.log(systemConfig.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecard_ai import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            system_config = client.system_configs.get(
                system_config_id="87654321-4d3b-4ae4-8c7a-4b6e2a19ccf0",
                system_id="12345678-0a8b-4f66-b6f3-2ddcfa097257",
            )
            print(system_config.id)
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ApiError:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: true
          x-stainless-any: true
      required:
        - code
        - message
        - details
      description: An API error.
    Testset:
      type: object
      properties:
        id:
          type: string
          description: The ID of the Testset.
        name:
          type: string
          description: The name of the Testset.
        description:
          type: string
          description: The description of the Testset.
        jsonSchema:
          type: object
          description: The JSON schema for each Testcase in the Testset.
          additionalProperties: true
        fieldMapping:
          type: object
          properties:
            inputs:
              type: array
              items:
                type: string
              description: Fields that represent inputs to the AI system.
            labels:
              type: array
              items:
                type: string
              description: Fields that represent expected outputs/labels.
            metadata:
              type: array
              items:
                type: string
              description: Fields that are not inputs or labels.
          required:
            - inputs
            - labels
            - metadata
          description: >-
            Maps top-level keys of the Testcase schema to their roles (input/label). Unmapped fields are
            treated as metadata.
      required:
        - id
        - name
        - description
        - jsonSchema
        - fieldMapping
      description: >-
        A collection of Testcases that share the same schema.

        Each Testset defines the structure of its Testcases through a JSON schema.

        The `fieldMapping` object maps top-level keys of the Testcase schema to their roles (input/label).

        Fields not mentioned in the `fieldMapping` during creation or update are treated as metadata.


        ## JSON Schema validation constraints supported:


        - **Required fields** - Fields listed in the schema's `required` array must be present in Testcases.

        - **Type validation** - Values must match the specified type (string, number, boolean, null, integer,
        object, array).

        - **Enum validation** - Values must be one of the options specified in the `enum` array.

        - **Object property validation** - Properties of objects must conform to their defined schemas.

        - **Array item validation** - Items in arrays must conform to the `items` schema.

        - **Logical composition** - Values must conform to at least one schema in the `anyOf` array.


        Testcases that fail validation will still be stored, but will include `validationErrors` detailing the
        issues.

        Extra fields in the Testcase data that are not in the schema will be stored but are ignored during
        validation.
    Testcase:
      type: object
      properties:
        id:
          type: string
          description: The ID of the Testcase.
        testsetId:
          type: string
          description: The ID of the Testset this Testcase belongs to.
        jsonData:
          type: object
          additionalProperties: true
          description: The JSON data of the Testcase, which is validated against the Testset's schema.
        inputs:
          type: object
          additionalProperties: true
          description: >-
            Derived from data based on the Testset's fieldMapping. Contains all fields marked as inputs,
            including those with validation errors.
        labels:
          type: object
          additionalProperties: true
          description: >-
            Derived from data based on the Testset's fieldMapping. Contains all fields marked as labels,
            including those with validation errors.
        validationErrors:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                description: JSON Pointer to the field with the validation error.
                example: /data/question
              message:
                type: string
                description: Human-readable error description.
                example: Required field missing
            required:
              - path
              - message
          description: >-
            Validation errors found in the Testcase data. If present, the Testcase doesn't fully conform to
            its Testset's schema.
      required:
        - id
        - testsetId
        - jsonData
        - inputs
        - labels
      description: >-
        A test case in the Scorecard system. Contains JSON data that is validated against the schema defined
        by its Testset.

        The `inputs` and `labels` fields are derived from the `data` field based on the Testset's
        `fieldMapping`, and include all mapped fields, including those with validation errors.

        Testcases are stored regardless of validation results, with any validation errors included in the
        `validationErrors` field.
    Run:
      type: object
      properties:
        id:
          type: string
          description: The ID of the Run.
        testsetId:
          type: string
          description: The ID of the Testset this Run is testing.
        systemConfigId:
          type: string
          format: uuid
          description: The ID of the system configuration this Run is using.
        metricIds:
          type: array
          items:
            type: string
          description: The IDs of the metrics this Run is using.
        status:
          type: string
          enum:
            - pending
            - awaiting_execution
            - running_execution
            - awaiting_scoring
            - running_scoring
            - awaiting_human_scoring
            - completed
          description: The status of the Run.
      required:
        - id
        - testsetId
        - metricIds
        - status
      description: A Run in the Scorecard system.
    Record:
      type: object
      properties:
        id:
          type: string
          description: The ID of the Record.
        runId:
          type: string
          description: The ID of the Run containing this Record.
        testcaseId:
          type: string
          description: The ID of the Testcase.
        inputs:
          type: object
          additionalProperties: true
          description: The actual inputs sent to the system, which should match the system's input schema.
        labels:
          type: object
          additionalProperties: true
          description: The expected outputs for the Testcase.
        outputs:
          type: object
          additionalProperties: true
          description: The actual outputs from the system.
      required:
        - id
        - runId
        - inputs
        - labels
        - outputs
      description: A record of a system execution in the Scorecard system.
    System:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the system.
        name:
          type: string
          description: The name of the system.
        description:
          type: string
          description: The description of the system.
        inputSchema:
          type: object
          description: The schema of the system's inputs.
          additionalProperties: true
        outputSchema:
          type: object
          description: The schema of the system's outputs.
          additionalProperties: true
        configSchema:
          type: object
          description: The schema of the system's configuration.
          additionalProperties: true
      required:
        - id
        - name
        - description
        - inputSchema
        - outputSchema
        - configSchema
      description: |-
        A System Under Test (SUT) defines the interface to a component or service you want to evaluate.

        It specifies three contracts through schemas:
        - inputSchema: The structure of data the system accepts.
        - outputSchema: The structure of data the system produces.
        - configSchema: The parameters that modify system behavior.

        This abstraction lets you evaluate any system as a black box, focusing on its interface rather than
        implementation details. It's particularly useful for systems with variable outputs or complex
        internal state.

        Systems are templates - to run evaluations, pair them with a SystemConfig that provides specific
        parameter values.
    SystemConfig:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the system configuration.
        systemId:
          type: string
          format: uuid
          description: The ID of the system the configuration belongs to.
        name:
          type: string
          description: The name of the system configuration.
        config:
          type: object
          additionalProperties: true
          description: The configuration of the system.
        validationErrors:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                description: JSON Pointer to the field with the validation error.
                example: /data/question
              message:
                type: string
                description: Human-readable error description.
                example: Required field missing
            required:
              - path
              - message
          description: >-
            Validation errors found in the configuration. If present, the configuration doesn't fully conform
            to its system's configSchema.
      required:
        - id
        - systemId
        - name
        - config
      description: |-
        A SystemConfig defines the specific settings for a System Under Test.

        Configurations contain parameter values that determine system behavior during evaluation.
        They are immutable snapshots - once created, they never change.

        When running evaluations, you reference a specific configId to establish which configuration to test.

        Configurations will be validated against the system's configSchema, with non-conforming values
        generating warnings.
  responses:
    UnauthenticatedError:
      description: Error indicating that the request is not authenticated.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          examples:
            Authentication failure:
              value:
                code: UNAUTHORIZED
                message: Invalid or missing authentication token
              summary: Authentication failure
              description: Error returned when authentication credentials are invalid or missing.
    ServiceError:
      description: An internal service error indicating an issue with the Scorecard service.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          examples:
            Internal error:
              value:
                code: INTERNAL_ERROR
                message: An unexpected error occurred while processing your request.
              summary: Internal error
              description: Generic error when an unexpected internal issue occurs.
