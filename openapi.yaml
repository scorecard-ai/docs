openapi: 3.1.0
info:
  title: Scorecard API
  description: REST API for Scorecard
  version: 1.0.0
servers:
  - url: https://api2.scorecard.io/api/v2
security:
  - bearerAuth: []
paths:
  /projects:
    get:
      operationId: listProjects
      summary: Get projects
      description: >-
        Retrieve a paginated list of all projects. Projects are ordered by creation date, with oldest projects
        first.
      parameters:
        - in: query
          name: limit
          description: Maximum number of items to return (1-100). Use with `cursor` for pagination through large sets.
          schema:
            type: integer
            exclusiveMinimum: 0
            default: 20
            example: 20
        - in: query
          name: cursor
          description: >-
            Cursor for pagination. Pass the `nextCursor` from the previous response to get the next page of
            results.
          schema:
            type: string
            example: '123'
      responses:
        '200':
          description: Successfully retrieved list of projects.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: int64
                          description: The ID of the project
                        name:
                          type:
                            - string
                            - 'null'
                          description: The name of the project
                      required:
                        - id
                        - name
                      description: A project in the Scorecard system.
                  nextCursor:
                    type:
                      - string
                      - 'null'
                  hasMore:
                    type: boolean
                  total:
                    type: integer
                    minimum: 0
                required:
                  - data
                  - nextCursor
                  - hasMore
              examples:
                Project list with pagination:
                  value:
                    data:
                      - id: 123
                        name: Q&A Chatbot
                        description: Chatbot for answering questions about the company.
                      - id: 124
                        name: Summarizer (Europe)
                        description: Summarizer for documents in the Europe region.
                    nextCursor: '125'
                    hasMore: true
                  summary: Project list with pagination
                  description: Example response showing a list of two projects with pagination information.
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '500':
          $ref: '#/components/responses/ServiceError'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              // Automatically fetches more pages as needed.
              for await (const projectListResponse of client.projects.list()) {
                console.log(projectListResponse.id);
              }
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecardpy import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            page = client.projects.list()
            page = page.data[0]
            print(page.id)
  /projects/{projectId}/testsets:
    get:
      operationId: listTestsets
      summary: Get testsets in project
      description: Retrieve a paginated list of testsets belonging to a project.
      parameters:
        - in: path
          name: projectId
          description: The ID of the project
          schema:
            type: string
            format: int64
          required: true
        - in: query
          name: limit
          description: Maximum number of items to return (1-100). Use with `cursor` for pagination through large sets.
          schema:
            type: integer
            exclusiveMinimum: 0
            default: 20
            example: 20
        - in: query
          name: cursor
          description: >-
            Cursor for pagination. Pass the `nextCursor` from the previous response to get the next page of
            results.
          schema:
            type: string
            example: '123'
      responses:
        '200':
          description: Successfully retrieved list of testsets.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Testset'
                  nextCursor:
                    type:
                      - string
                      - 'null'
                  hasMore:
                    type: boolean
                  total:
                    type: integer
                    minimum: 0
                required:
                  - data
                  - nextCursor
                  - hasMore
              examples:
                Testset list with fields:
                  value:
                    data:
                      - id: 123
                        name: Long Context Q&A
                        description: Testset for long context Q&A chatbot.
                        schema:
                          type: object
                          properties:
                            question:
                              type: string
                            idealAnswer:
                              type: string
                            provenance:
                              type: string
                            geo:
                              type: string
                        fieldMapping:
                          inputs:
                            - question
                          labels:
                            - idealAnswer
                          metadata:
                            - provenance
                            - geo
                    nextCursor: '125'
                    hasMore: true
                  summary: Testset list with fields
                  description: >-
                    Example response showing a paginated list of testsets with schema and field mapping
                    details.
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '500':
          $ref: '#/components/responses/ServiceError'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              // Automatically fetches more pages as needed.
              for await (const testset of client.testsets.list('projectId')) {
                console.log(testset.id);
              }
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecardpy import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            page = client.testsets.list(
                project_id="projectId",
            )
            page = page.data[0]
            print(page.id)
    post:
      operationId: createTestset
      summary: Create testset
      description: Create a new testset for a project. The testset will be created in the project specified in the path.
      parameters:
        - in: path
          name: projectId
          description: The ID of the project to create the testset in
          schema:
            type: string
            format: int64
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the testset
                description:
                  type: string
                  description: The description of the testset
                schema:
                  type: object
                  description: The JSON schema for each testcase in the testset
                  additionalProperties: true
                fieldMapping:
                  type: object
                  properties:
                    inputs:
                      type: array
                      items:
                        type: string
                      description: Fields that represent inputs to the AI system
                    labels:
                      type: array
                      items:
                        type: string
                      description: Fields that represent expected outputs/labels
                    metadata:
                      type: array
                      items:
                        type: string
                      description: Fields that are not inputs or labels
                  required:
                    - inputs
                    - labels
                    - metadata
                  description: >-
                    Maps top-level keys of the testcase schema to their roles (input/label). Unmapped fields
                    are treated as metadata.
              required:
                - name
                - description
                - schema
                - fieldMapping
            examples:
              Create Q&A testset:
                value:
                  name: Long Context Q&A
                  description: Testset for long context Q&A chatbot.
                  schema:
                    type: object
                    properties:
                      question:
                        type: string
                      idealAnswer:
                        type: string
                      provenance:
                        type: string
                      geo:
                        type: string
                    fieldMapping:
                      inputs:
                        - question
                      labels:
                        - idealAnswer
                      metadata: []
                summary: Create Q&A testset
                description: >-
                  Request to create a testset for evaluating long context Q&A with fields for the question,
                  ideal answer, and metadata like provenance and geographical context.
      responses:
        '201':
          description: Testset created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Testset'
              examples:
                Created testset response:
                  value:
                    id: 123
                    name: Long Context Q&A
                    description: Testset for long context Q&A chatbot.
                    schema:
                      type: object
                      properties:
                        question:
                          type: string
                        idealAnswer:
                          type: string
                        provenance:
                          type: string
                        geo:
                          type: string
                      fieldMapping:
                        inputs:
                          - question
                        labels:
                          - idealAnswer
                        metadata:
                          - provenance
                          - geo
                  summary: Created testset response
                  description: >-
                    Response after successfully creating a testset, showing the assigned ID and complete
                    schema with automatically populated field mappings.
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '500':
          $ref: '#/components/responses/ServiceError'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const testset = await client.testsets.create('projectId', {
                description: 'Testset for long context Q&A chatbot.',
                fieldMapping: { inputs: ['string'], labels: ['string'], metadata: ['string'] },
                name: 'Long Context Q&A',
                schema: {
                  type: 'object',
                  properties: {
                    question: { type: 'string' },
                    idealAnswer: { type: 'string' },
                    provenance: { type: 'string' },
                    geo: { type: 'string' },
                  },
                  fieldMapping: { inputs: ['question'], labels: ['idealAnswer'], metadata: [] },
                },
              });

              console.log(testset.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecardpy import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            testset = client.testsets.create(
                project_id="projectId",
                description="Testset for long context Q&A chatbot.",
                field_mapping={
                    "inputs": ["string"],
                    "labels": ["string"],
                    "metadata": ["string"],
                },
                name="Long Context Q&A",
                schema={
                    "type": "object",
                    "properties": {
                        "question": {
                            "type": "string"
                        },
                        "idealAnswer": {
                            "type": "string"
                        },
                        "provenance": {
                            "type": "string"
                        },
                        "geo": {
                            "type": "string"
                        },
                    },
                    "fieldMapping": {
                        "inputs": ["question"],
                        "labels": ["idealAnswer"],
                        "metadata": [],
                    },
                },
            )
            print(testset.id)
  /testsets/{testsetId}:
    get:
      operationId: getTestset
      summary: Get testset by ID
      parameters:
        - in: path
          name: testsetId
          description: The ID of the testset
          schema:
            type: string
            format: int64
          required: true
      responses:
        '200':
          description: Successfully retrieved testset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Testset'
              examples:
                Complete testset details:
                  value:
                    id: 123
                    name: Long Context Q&A
                    description: Testset for long context Q&A chatbot.
                    schema:
                      type: object
                      properties:
                        question:
                          type: string
                        idealAnswer:
                          type: string
                        provenance:
                          type: string
                        geo:
                          type: string
                    fieldMapping:
                      inputs:
                        - question
                      labels:
                        - idealAnswer
                      metadata:
                        - provenance
                        - geo
                  summary: Complete testset details
                  description: >-
                    Example response showing all details of a testset including its schema definition and
                    field mappings.
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '500':
          $ref: '#/components/responses/ServiceError'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const testset = await client.testsets.get('testsetId');

              console.log(testset.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecardpy import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            testset = client.testsets.get(
                "testsetId",
            )
            print(testset.id)
    patch:
      operationId: updateTestset
      summary: Update testset
      description: >-
        Update a testset. Only the fields provided in the request body will be updated.

        If a field is provided, the new content will replace the existing content.

        If a field is not provided, the existing content will remain unchanged.


        When updating the schema:

        - If field mappings are not provided and existing mappings reference fields that no longer exist,
        those mappings will be automatically removed

        - To preserve all existing mappings, ensure all referenced fields remain in the updated schema

        - For complete control, provide both schema and fieldMapping when updating the schema
      parameters:
        - in: path
          name: testsetId
          description: The ID of the testset to update
          schema:
            type: string
            format: int64
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the testset
                description:
                  type: string
                  description: The description of the testset
                schema:
                  type: object
                  description: The JSON schema for each testcase in the testset
                  additionalProperties: true
                fieldMapping:
                  type: object
                  properties:
                    inputs:
                      type: array
                      items:
                        type: string
                      description: Fields that represent inputs to the AI system
                    labels:
                      type: array
                      items:
                        type: string
                      description: Fields that represent expected outputs/labels
                    metadata:
                      type: array
                      items:
                        type: string
                      description: Fields that are not inputs or labels
                  required:
                    - inputs
                    - labels
                    - metadata
                  description: >-
                    Maps top-level keys of the testcase schema to their roles (input/label). Unmapped fields
                    are treated as metadata.
            examples:
              Update metadata only:
                value:
                  name: Updated Q&A Testset
                  description: Updated description for the Q&A testset.
                summary: Update metadata only
                description: >-
                  Simple metadata update without changing schema or mappings. Updates only the name and
                  description fields while preserving the existing schema and field mappings.
              Remove schema field:
                value:
                  schema:
                    type: object
                    properties:
                      question:
                        type: string
                      idealAnswer:
                        type: string
                      provenance:
                        type: string
                summary: Remove schema field
                description: >-
                  This request removes the 'geo' field that existed in the original schema, but doesn't
                  explicitly update the field mappings. Scorecard will automatically remove any field mappings
                  that reference deleted fields.
              Full schema revision:
                value:
                  schema:
                    type: object
                    properties:
                      question:
                        type: string
                      idealAnswer:
                        type: string
                      provenance:
                        type: string
                  fieldMapping:
                    inputs:
                      - question
                    labels:
                      - idealAnswer
                    metadata: []
                summary: Full schema revision
                description: >-
                  Explicit update of both schema and field mappings, allowing complete control over the
                  testset structure. This example removes the 'geo' field and explicitly updates the field
                  mappings to exclude 'provenance' from metadata.
      responses:
        '200':
          description: Testset updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Testset'
              examples:
                Updated metadata only:
                  value:
                    id: 123
                    name: Updated Q&A Testset
                    description: Updated description for the Q&A testset.
                    schema:
                      type: object
                      properties:
                        question:
                          type: string
                        idealAnswer:
                          type: string
                        provenance:
                          type: string
                        geo:
                          type: string
                    fieldMapping:
                      inputs:
                        - question
                      labels:
                        - idealAnswer
                      metadata:
                        - provenance
                        - geo
                  summary: Updated metadata only
                  description: >-
                    Result after updating only the testset's name and description. All schema fields and
                    mappings remain unchanged.
                Auto-updated mappings:
                  value:
                    id: 123
                    name: Long Context Q&A
                    description: Testset for long context Q&A chatbot.
                    schema:
                      type: object
                      properties:
                        question:
                          type: string
                        idealAnswer:
                          type: string
                        provenance:
                          type: string
                    fieldMapping:
                      inputs:
                        - question
                      labels:
                        - idealAnswer
                      metadata:
                        - provenance
                  summary: Auto-updated mappings
                  description: >-
                    Result after schema update with automatic field mapping cleanup. The 'geo' field has been
                    automatically removed from the metadata mapping since it no longer exists in the schema.
                Custom field mapping:
                  value:
                    id: 123
                    name: Long Context Q&A
                    description: Testset for long context Q&A chatbot.
                    schema:
                      type: object
                      properties:
                        question:
                          type: string
                        idealAnswer:
                          type: string
                        provenance:
                          type: string
                    fieldMapping:
                      inputs:
                        - question
                      labels:
                        - idealAnswer
                      metadata: []
                  summary: Custom field mapping
                  description: >-
                    Result after explicit schema and field mapping update. Note that 'provenance' is not
                    included in metadata since it wasn't specified in the request's field mapping.
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '500':
          $ref: '#/components/responses/ServiceError'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const testset = await client.testsets.update('testsetId', {
                description: 'Updated description for the Q&A testset.',
                name: 'Updated Q&A Testset',
              });

              console.log(testset.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecardpy import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            testset = client.testsets.update(
                testset_id="testsetId",
                description="Updated description for the Q&A testset.",
                name="Updated Q&A Testset",
            )
            print(testset.id)
    delete:
      operationId: deleteTestset
      summary: Delete testset
      parameters:
        - in: path
          name: testsetId
          description: The ID of the testset to delete
          schema:
            type: string
            format: int64
          required: true
      responses:
        '200':
          description: Testset deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the deletion was successful
                required:
                  - success
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '500':
          $ref: '#/components/responses/ServiceError'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const testset = await client.testsets.delete('testsetId');

              console.log(testset.success);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecardpy import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            testset = client.testsets.delete(
                "testsetId",
            )
            print(testset.success)
  /testsets/{testsetId}/testcases:
    get:
      operationId: listTestcases
      summary: Get testcases in testset
      description: Retrieve a paginated list of testcases belonging to a testset.
      parameters:
        - in: path
          name: testsetId
          description: The ID of the testset to list testcases from
          schema:
            type: string
            format: int64
          required: true
        - in: query
          name: limit
          description: Maximum number of items to return (1-100). Use with `cursor` for pagination through large sets.
          schema:
            type: integer
            exclusiveMinimum: 0
            default: 20
            example: 20
        - in: query
          name: cursor
          description: >-
            Cursor for pagination. Pass the `nextCursor` from the previous response to get the next page of
            results.
          schema:
            type: string
            example: '123'
      responses:
        '200':
          description: Successfully retrieved list of testcases.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Testcase'
                  nextCursor:
                    type:
                      - string
                      - 'null'
                  hasMore:
                    type: boolean
                  total:
                    type: integer
                    minimum: 0
                required:
                  - data
                  - nextCursor
                  - hasMore
              examples:
                Testcase list with pagination:
                  value:
                    data:
                      - id: 123
                        testsetId: 456
                        data:
                          question: What is the capital of France?
                          idealAnswer: Paris
                          provenance: hand_curated
                        inputs:
                          question: What is the capital of France?
                        labels:
                          idealAnswer: Paris
                      - id: 124
                        testsetId: 456
                        data:
                          question: What is the largest planet in our solar system?
                          idealAnswer: Jupiter
                          provenance: synthetic
                        inputs:
                          question: What is the largest planet in our solar system?
                        labels:
                          idealAnswer: Jupiter
                      - id: 125
                        testsetId: 456
                        data:
                          question: What is the deepest ocean on Earth?
                          provenance: user_feedback
                        inputs:
                          question: What is the deepest ocean on Earth?
                        labels: {}
                        validationErrors:
                          - path: /data
                            message: Required field 'idealAnswer' is missing
                    nextCursor: '126'
                    hasMore: true
                  summary: Testcase list with pagination
                  description: Example response showing a paginated list of testcases.
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '500':
          $ref: '#/components/responses/ServiceError'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              // Automatically fetches more pages as needed.
              for await (const testcase of client.testcases.list('testsetId')) {
                console.log(testcase.id);
              }
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecardpy import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            page = client.testcases.list(
                testset_id="testsetId",
            )
            page = page.data[0]
            print(page.id)
    post:
      operationId: createTestcases
      summary: Create multiple testcases
      description: Create multiple testcases in the specified testset.
      parameters:
        - in: path
          name: testsetId
          description: The ID of the testset to add the testcases to
          schema:
            type: string
            format: int64
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      data:
                        type: object
                        additionalProperties: true
                        description: The JSON data of the testcase, which is validated against the testset's schema.
                    required:
                      - data
                    description: >-
                      A test case in the Scorecard system. Contains JSON data that is validated against the
                      schema defined by its testset.

                      The `inputs` and `labels` fields are derived from the `data` field based on the
                      testset's `fieldMapping`, and include all mapped fields, including those with validation
                      errors.

                      Testcases are stored regardless of validation results, with any validation errors
                      included in the `validationErrors` field.
                  minItems: 1
                  maxItems: 100
                  description: Testcases to create (max 100)
              required:
                - items
            examples:
              Create multiple testcases:
                value:
                  items:
                    - data:
                        question: What is the capital of France?
                        idealAnswer: Paris
                        provenance: hand_curated
                    - data:
                        question: What is the largest planet in our solar system?
                        idealAnswer: Jupiter
                        provenance: synthetic
                    - data:
                        question: How many planets are in our solar system?
                        idealAnswer: 8
                        provenance: user_feedback
                      validationErrors:
                        - path: /data/idealAnswer
                          message: Expected string, received number
                summary: Create multiple testcases
                description: Create multiple testcases in a single request.
      responses:
        '201':
          description: Testcases created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Testcase'
                required:
                  - items
              examples:
                Created testcases response:
                  value:
                    items:
                      - id: 123
                        testsetId: 456
                        data:
                          question: What is the capital of France?
                          idealAnswer: Paris
                          provenance: hand_curated
                        inputs:
                          question: What is the capital of France?
                        labels:
                          idealAnswer: Paris
                      - id: 124
                        testsetId: 456
                        data:
                          question: What is the largest planet in our solar system?
                          idealAnswer: Jupiter
                          provenance: synthetic
                        inputs:
                          question: What is the largest planet in our solar system?
                        labels:
                          idealAnswer: Jupiter
                      - id: 125
                        testsetId: 456
                        data:
                          question: How many planets are in our solar system?
                          idealAnswer: 8
                          provenance: user_feedback
                        inputs:
                          question: How many planets are in our solar system?
                        labels:
                          idealAnswer: 8
                        validationErrors:
                          - path: /data/idealAnswer
                            message: Expected string, received number
                  summary: Created testcases
                  description: Example response showing successfully created testcases.
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '500':
          $ref: '#/components/responses/ServiceError'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const testcase = await client.testcases.create('testsetId', {
                items: [
                  {
                    data: {
                      question: 'What is the capital of France?',
                      idealAnswer: 'Paris',
                      provenance: 'hand_curated',
                    },
                  },
                  {
                    data: {
                      question: 'What is the largest planet in our solar system?',
                      idealAnswer: 'Jupiter',
                      provenance: 'synthetic',
                    },
                  },
                  {
                    data: {
                      question: 'How many planets are in our solar system?',
                      idealAnswer: 8,
                      provenance: 'user_feedback',
                    },
                    validationErrors: [{ path: '/data/idealAnswer', message: 'Expected string, received number' }],
                  },
                ],
              });

              console.log(testcase.items);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecardpy import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            testcase = client.testcases.create(
                testset_id="testsetId",
                items=[{
                    "data": {
                        "question": "What is the capital of France?",
                        "idealAnswer": "Paris",
                        "provenance": "hand_curated",
                    }
                }, {
                    "data": {
                        "question": "What is the largest planet in our solar system?",
                        "idealAnswer": "Jupiter",
                        "provenance": "synthetic",
                    }
                }, {
                    "data": {
                        "question": "How many planets are in our solar system?",
                        "idealAnswer": 8,
                        "provenance": "user_feedback",
                    },
                    "validation_errors": [{
                        "path": "/data/idealAnswer",
                        "message": "Expected string, received number",
                    }],
                }],
            )
            print(testcase.items)
    delete:
      operationId: deleteTestcases
      summary: Delete multiple testcases
      description: Delete multiple testcases from the specified testset.
      parameters:
        - in: path
          name: testsetId
          description: The ID of the testset containing the testcases
          schema:
            type: string
            format: int64
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
                    format: int64
                  minItems: 1
                  maxItems: 100
                  description: IDs of testcases to delete (max 100)
              required:
                - ids
            examples:
              Delete multiple testcases:
                value:
                  ids:
                    - 123
                    - 124
                    - 125
                summary: Delete multiple testcases
                description: Delete multiple testcases in a single request.
      responses:
        '200':
          description: Testcases deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  deletedCount:
                    type: integer
                    minimum: 0
                    description: Number of testcases successfully deleted
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: int64
                          description: ID of the testcase that failed to be deleted
                        message:
                          type: string
                          description: Error message explaining why the deletion failed
                      required:
                        - id
                        - message
                    description: List of errors encountered during deletion, if any
                required:
                  - deletedCount
                  - errors
              examples:
                Deleted testcases response:
                  value:
                    deletedCount: 3
                    errors: []
                  summary: Deleted testcases
                  description: Example response showing successfully deleted testcases.
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '500':
          $ref: '#/components/responses/ServiceError'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const testcase = await client.testcases.delete('testsetId', { ids: ['123', '124', '125'] });

              console.log(testcase.deletedCount);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecardpy import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            testcase = client.testcases.delete(
                testset_id="testsetId",
                ids=["123", "124", "125"],
            )
            print(testcase.deleted_count)
  /testcases/{testcaseId}:
    get:
      operationId: getTestcase
      summary: Get testcase
      description: Retrieve a specific testcase by ID.
      parameters:
        - in: path
          name: testcaseId
          description: The ID of the testcase to retrieve
          schema:
            type: string
            format: int64
          required: true
      responses:
        '200':
          description: Successfully retrieved testcase.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Testcase'
              examples:
                Testcase details:
                  value:
                    id: 123
                    testsetId: 456
                    data:
                      question: What is the capital of France?
                      idealAnswer: Paris
                      provenance: hand_curated
                    inputs:
                      question: What is the capital of France?
                    labels:
                      idealAnswer: Paris
                  summary: Testcase details
                  description: Example response showing a testcase's details.
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '500':
          $ref: '#/components/responses/ServiceError'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const testcase = await client.testcases.get('testcaseId');

              console.log(testcase.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecardpy import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            testcase = client.testcases.get(
                "testcaseId",
            )
            print(testcase.id)
    put:
      operationId: updateTestcase
      summary: Update testcase
      description: Replace the data of an existing testcase while keeping its ID.
      parameters:
        - in: path
          name: testcaseId
          description: The ID of the testcase to update
          schema:
            type: string
            format: int64
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  additionalProperties: true
                  description: The JSON data of the testcase, which is validated against the testset's schema.
              required:
                - data
            examples:
              Update testcase data:
                value:
                  data:
                    question: What is the capital of France?
                    idealAnswer: Paris is the capital of France
                    provenance: hand_curated
                summary: Update testcase data
                description: Update the content of a testcase with improved information.
      responses:
        '200':
          description: Testcase updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Testcase'
              examples:
                Updated testcase:
                  value:
                    id: 123
                    testsetId: 456
                    data:
                      question: What is the capital of France?
                      idealAnswer: Paris is the capital of France
                      provenance: hand_curated
                    inputs:
                      question: What is the capital of France?
                    labels:
                      idealAnswer: Paris is the capital of France
                  summary: Updated testcase
                  description: Example response showing a successfully updated testcase.
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '500':
          $ref: '#/components/responses/ServiceError'
      x-codeSamples:
        - lang: JavaScript
          source: |-
            import Scorecard from 'scorecard-ai';

            const client = new Scorecard({
              bearerToken: process.env['SCORECARD_API_KEY'], // This is the default and can be omitted
            });

            async function main() {
              const testcase = await client.testcases.update('testcaseId', {
                data: {
                  question: 'What is the capital of France?',
                  idealAnswer: 'Paris is the capital of France',
                  provenance: 'hand_curated',
                },
              });

              console.log(testcase.id);
            }

            main();
        - lang: Python
          source: |-
            import os
            from scorecardpy import Scorecard

            client = Scorecard(
                bearer_token=os.environ.get("SCORECARD_API_KEY"),  # This is the default and can be omitted
            )
            testcase = client.testcases.update(
                testcase_id="testcaseId",
                data={
                    "question": "What is the capital of France?",
                    "idealAnswer": "Paris is the capital of France",
                    "provenance": "hand_curated",
                },
            )
            print(testcase.id)
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ApiError:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: true
          x-stainless-any: true
      required:
        - code
        - message
        - details
      description: An API error
    Testset:
      type: object
      properties:
        id:
          type: string
          format: int64
          description: The ID of the testset
        name:
          type: string
          description: The name of the testset
        description:
          type: string
          description: The description of the testset
        schema:
          type: object
          additionalProperties: true
        fieldMapping:
          type: object
          properties:
            inputs:
              type: array
              items:
                type: string
              description: Fields that represent inputs to the AI system
            labels:
              type: array
              items:
                type: string
              description: Fields that represent expected outputs/labels
            metadata:
              type: array
              items:
                type: string
              description: Fields that are not inputs or labels
          required:
            - inputs
            - labels
            - metadata
          description: >-
            Maps top-level keys of the testcase schema to their roles (input/label). Unmapped fields are
            treated as metadata.
      required:
        - id
        - name
        - description
        - schema
        - fieldMapping
      description: >-
        A collection of test cases that share the same schema.

        Each testset defines the structure of its test cases through a JSON schema.

        The `fieldMapping` object maps top-level keys of the testcase schema to their roles (input/label).

        Fields not mentioned in the `fieldMapping` during creation or update are treated as metadata.


        ## JSON Schema validation constraints supported:


        - **Required fields** - Fields listed in the schema's `required` array must be present in testcases

        - **Type validation** - Values must match the specified type (string, number, boolean, null, integer,
        object, array)

        - **Enum validation** - Values must be one of the options specified in the `enum` array

        - **Object property validation** - Properties of objects must conform to their defined schemas

        - **Array item validation** - Items in arrays must conform to the `items` schema

        - **Logical composition** - Values must conform to at least one schema in the `anyOf` array


        Testcases that fail validation will still be stored, but will include `validationErrors` detailing the
        issues.

        Extra fields in the testcase data that are not in the schema will be stored but are ignored during
        validation.
    Testcase:
      type: object
      properties:
        id:
          type: string
          format: int64
          description: The ID of the testcase
        testsetId:
          type: string
          format: int64
          description: The ID of the testset this testcase belongs to
        data:
          type: object
          additionalProperties: true
          description: The JSON data of the testcase, which is validated against the testset's schema.
        inputs:
          type: object
          additionalProperties: true
          description: >-
            Derived from data based on the testset's fieldMapping. Contains all fields marked as inputs,
            including those with validation errors.
        labels:
          type: object
          additionalProperties: true
          description: >-
            Derived from data based on the testset's fieldMapping. Contains all fields marked as labels,
            including those with validation errors.
        validationErrors:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                description: JSON Pointer to the field with the validation error
                example: /data/question
              message:
                type: string
                description: Human-readable error description
                example: Required field missing
            required:
              - path
              - message
          description: >-
            Validation errors found in the testcase data. If present, the testcase doesn't fully conform to
            its testset's schema.
      required:
        - id
        - testsetId
        - data
        - inputs
        - labels
      description: >-
        A test case in the Scorecard system. Contains JSON data that is validated against the schema defined
        by its testset.

        The `inputs` and `labels` fields are derived from the `data` field based on the testset's
        `fieldMapping`, and include all mapped fields, including those with validation errors.

        Testcases are stored regardless of validation results, with any validation errors included in the
        `validationErrors` field.
  responses:
    UnauthenticatedError:
      description: Error indicating that the request is not authenticated.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          examples:
            Authentication failure:
              value:
                code: UNAUTHORIZED
                message: Invalid or missing authentication token
              summary: Authentication failure
              description: Error returned when authentication credentials are invalid or missing.
    ServiceError:
      description: An internal service error indicating an issue with the Scorecard service.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          examples:
            Internal error:
              value:
                code: INTERNAL_ERROR
                message: An unexpected error occurred while processing your request.
              summary: Internal error
              description: Generic error when an unexpected internal issue occurs.